// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resources

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ServerResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"backups": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If true this will enable two daily backups for the server. `options.daily_backups` will override this value if provided. Setting this to false has no effect.\n",
				MarkdownDescription: "If true this will enable two daily backups for the server. `options.daily_backups` will override this value if provided. Setting this to false has no effect.\n",
			},
			"id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The ID of the server to fetch.",
				MarkdownDescription: "The ID of the server to fetch.",
			},
			"image": schema.StringAttribute{
				Required:            true,
				Description:         "The slug of the selected operating system.",
				MarkdownDescription: "The slug of the selected operating system.",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The hostname of your server, such as vps01.yourcompany.com. If not provided, the server will be created with a random name.",
				MarkdownDescription: "The hostname of your server, such as vps01.yourcompany.com. If not provided, the server will be created with a random name.",
			},
			"password": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If this is provided the specified or default remote user's account password will be set to this value. Only valid if the server supports password change actions (check server.password_change_supported via the servers endpoint). If omitted and the server supports password change actions a random password will be generated and emailed to the account email address.\n",
				MarkdownDescription: "If this is provided the specified or default remote user's account password will be set to this value. Only valid if the server supports password change actions (check server.password_change_supported via the servers endpoint). If omitted and the server supports password change actions a random password will be generated and emailed to the account email address.\n",
			},
			"port_blocking": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Port blocking of outgoing connections for email, SSH and Remote Desktop (TCP ports 22, 25, and 3389) is enabled by default for all new servers. If this is false port blocking will be disabled. Disabling port blocking is only available to reviewed accounts.",
				MarkdownDescription: "Port blocking of outgoing connections for email, SSH and Remote Desktop (TCP ports 22, 25, and 3389) is enabled by default for all new servers. If this is false port blocking will be disabled. Disabling port blocking is only available to reviewed accounts.",
			},
			"region": schema.StringAttribute{
				Required:            true,
				Description:         "The slug of the selected region.",
				MarkdownDescription: "The slug of the selected region.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"size": schema.StringAttribute{
				Required:            true,
				Description:         "The slug of the selected size.",
				MarkdownDescription: "The slug of the selected size.",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"ssh_keys": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "This is a list of SSH key ids. If this is null or not provided, any SSH keys that have been marked as default will be deployed (assuming the operating system supports SSH Keys). Submit an empty list to disable deployment of default keys.",
				MarkdownDescription: "This is a list of SSH key ids. If this is null or not provided, any SSH keys that have been marked as default will be deployed (assuming the operating system supports SSH Keys). Submit an empty list to disable deployment of default keys.",
			},
			"user_data": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If provided this will be used to initialise the new server. This must be left null if the Image does not support UserData, see DistributionInfo.Features for more information.",
				MarkdownDescription: "If provided this will be used to initialise the new server. This must be left null if the Image does not support UserData, see DistributionInfo.Features for more information.",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(65536),
				},
			},
			"vpc_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Leave null to use default (public) network for the selected region.",
				MarkdownDescription: "Leave null to use default (public) network for the selected region.",
			},
		},
	}
}

type ServerModel struct {
	Backups      types.Bool   `tfsdk:"backups"`
	Id           types.Int64  `tfsdk:"id"`
	Image        types.String `tfsdk:"image"`
	Name         types.String `tfsdk:"name"`
	Password     types.String `tfsdk:"password"`
	PortBlocking types.Bool   `tfsdk:"port_blocking"`
	Region       types.String `tfsdk:"region"`
	Size         types.String `tfsdk:"size"`
	SshKeys      types.List   `tfsdk:"ssh_keys"`
	UserData     types.String `tfsdk:"user_data"`
	VpcId        types.Int64  `tfsdk:"vpc_id"`
}
